import{_ as n,o as s,c as a,e as t}from"./app-03679ccd.js";const p={},e=t(`<h1 id="三、基础数据类型" tabindex="-1"><a class="header-anchor" href="#三、基础数据类型" aria-hidden="true">#</a> 三、基础数据类型</h1><p>基本类型：</p><ul><li>1种内置布尔类型：bool。</li><li>11种内置整数类型：int8、uint8、int16、uint16、int32、uint32、int64、uint64、int、uint和uintptr。</li><li>2种内置浮点数类型：float32 和 float64。</li><li>2种内置复数类型：complex64 和 complex128。</li><li>1种内置字符串类型：string。</li></ul><p>组合类型：</p><ul><li>指针类型</li><li>结构体类型</li><li>函数类型</li><li>容器类型： 数组、切片、映射（map）</li><li>通道类型</li><li>接口类型</li></ul><h2 id="_1-byte-和-rune" tabindex="-1"><a class="header-anchor" href="#_1-byte-和-rune" aria-hidden="true">#</a> 1. byte 和 rune</h2><p>Go 语言里的 <strong>字符串</strong> 的内部实现使用 UTF-8 编码。 字符串的值为双引号 <code>&quot;</code> 中的内容。 组成每个 <strong>字符串</strong> 的元素叫做 <code>字符</code>，字符用单引号 <code>&#39;</code> 包裹起来。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token char">&#39;中&#39;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token char">&#39;x&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Go 语言的字符有以下两种：</p><ol><li><code>uint8</code> 类型，或者叫 byte 型，代表一个 ASCII 码字符。</li><li><code>rune</code> 类型，代表一个 UTF-8 字符。</li></ol><p>当需要处理中文等复合字符，则需要用到 rune 类型。rune 类型实际是一个 <code>int32</code>。</p><p>Go 使用了特殊的 rune 类型来处理 Unicode，让基于 Unicode 的文本处理更为方便，也可以使用 byte 型进行默认字符串处理，性能和扩展性都有照顾。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">traversalString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s <span class="token operator">:=</span> <span class="token string">&quot;hello世界&quot;</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v(%c) &quot;</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> r <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v(%c) &quot;</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> r<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 104(h) 101(e) 108(l) 108(l) 111(o) 228(ä) 184(¸) 150() 231(ç) 149() 140() </span>
<span class="token comment">// 104(h) 101(e) 108(l) 108(l) 111(o) 19990(世) 30028(界) </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 UTF8 编码下一个中文汉字由3~4个字节组成，所以我们不能简单的按照字节去遍历一个包含中文的字符串。</p><h2 id="_2-修改字符串" tabindex="-1"><a class="header-anchor" href="#_2-修改字符串" aria-hidden="true">#</a> 2. 修改字符串</h2><p>字符串底层是一个 byte数组，所以可以和 <code>[]byte</code> 类型相互转换。字符串是不能修改的，字符串是由byte字节组成，所以字符串的长度是 byte 字节的长度。 rune类型用来表示utf8字符，一个rune字符由一个或多个byte组成。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">changeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	s1 <span class="token operator">:=</span> <span class="token string">&quot;big&quot;</span>
	byteS1 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
	byteS1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;p&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>byteS1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// pig 3</span>

	s2 <span class="token operator">:=</span> <span class="token string">&quot;白萝卜&quot;</span>
	runeS2 <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">rune</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
	runeS2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;红&#39;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>runeS2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 红萝卜 9</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-类型转换" tabindex="-1"><a class="header-anchor" href="#_3-类型转换" aria-hidden="true">#</a> 3. 类型转换</h2><p>比如计算直角三角形的斜边长时使用 math 包的 Sqrt() 函数，该函数接收的是 float64 类型的参数，而变量a和b都是int类型的，这个时候就需要将a和b强制类型转换为 float64 类型。</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">sqrtDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>
	<span class="token keyword">var</span> c <span class="token builtin">int</span>
	<span class="token comment">// math.Sqrt()接收的参数是 float64 类型，需要强制转换</span>
	c <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token function">float64</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-字符串常用操作" tabindex="-1"><a class="header-anchor" href="#_4-字符串常用操作" aria-hidden="true">#</a> 4. 字符串常用操作</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">&quot;hello_world&quot;</span>

<span class="token comment">// 1.	求长度</span>
<span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>                    <span class="token comment">// 11</span>

<span class="token comment">// 2. 拼接字符串: +或fmt.Sprintf</span>
s <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span>                   <span class="token comment">// hello_world!</span>

<span class="token keyword">const</span> name<span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token string">&quot;Kim&quot;</span><span class="token punctuation">,</span> <span class="token number">22</span>
s <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%s is %d years old.\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token comment">// Kim is 22 years old.</span>

<span class="token comment">// 3. 分割</span>
strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span>     <span class="token comment">// [hello world]</span>

<span class="token comment">// 4. 判断是否包含</span>
strings<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span>  <span class="token comment">// true</span>

<span class="token comment">// 5. 前缀/后缀判断</span>
strings<span class="token punctuation">.</span><span class="token function">HasPrefix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;h&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
strings<span class="token punctuation">.</span><span class="token function">HasSuffix</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;d&quot;</span><span class="token punctuation">)</span> <span class="token comment">// true</span>

<span class="token comment">// 6. 子串出现的位置</span>
strings<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;l&quot;</span><span class="token punctuation">)</span>     <span class="token comment">// 2</span>
strings<span class="token punctuation">.</span><span class="token function">LastIndex</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&quot;l&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 9</span>

<span class="token comment">// 7. join操作</span>
strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">{</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;world&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">&quot;__&quot;</span><span class="token punctuation">)</span> <span class="token comment">// hello__world</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","dataType.html.vue"]]);export{r as default};
