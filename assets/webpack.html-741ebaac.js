import{_ as p,r as o,o as c,c as i,a as n,d as a,b as t,e as l}from"./app-03679ccd.js";const u={},r=l(`<h1 id="webpack-相关" tabindex="-1"><a class="header-anchor" href="#webpack-相关" aria-hidden="true">#</a> Webpack 相关</h1><h2 id="webpack-执行流程" tabindex="-1"><a class="header-anchor" href="#webpack-执行流程" aria-hidden="true">#</a> Webpack 执行流程</h2><ol><li>初始化 Compiler：new Webpack(config) 得到 Compiler 对象</li><li>开始编译：调用 Compiler 对象 run 方法开始执行编</li><li>确定入口：根据配置中的 entry 找出所有入口文件</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行编译，再找出该模块依赖的模块，递归直到所有模块被加载进来</li><li>完成模块编译：在经过第 4 步使用 Loader 编译完所有模块后，得到了每个模块被编译后的最终内容以及它们之间的依赖关系。</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表（注意：这步是可以修改输出内容的最后机会）</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统</li></ol><h2 id="前端部署发布浏览器缓存问题" tabindex="-1"><a class="header-anchor" href="#前端部署发布浏览器缓存问题" aria-hidden="true">#</a> 前端部署发布浏览器缓存问题</h2><h3 id="_1-每次修改版本号" tabindex="-1"><a class="header-anchor" href="#_1-每次修改版本号" aria-hidden="true">#</a> 1. 每次修改版本号</h3><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token comment">// package.json</span>
<span class="token punctuation">{</span>
  <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;vue_app&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0.1.0&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">VUE_APP_VERSION</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;../package.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>version
<span class="token keyword">const</span> vers <span class="token operator">=</span> window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;appVersion&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">VUE_APP_VERSION</span> <span class="token operator">!=</span> vers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;appVersion&quot;</span><span class="token punctuation">,</span> <span class="token constant">VUE_APP_VERSION</span><span class="token punctuation">)</span>
  location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-修改打包文件名" tabindex="-1"><a class="header-anchor" href="#_2-修改打包文件名" aria-hidden="true">#</a> 2. 修改打包文件名</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> Version <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
  output<span class="token operator">:</span> <span class="token punctuation">{</span>
    path<span class="token operator">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsRoot<span class="token punctuation">,</span>
    filename<span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">&#39;js/[name].[chunkhash].&#39;</span> <span class="token operator">+</span> Version <span class="token operator">+</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    chunkFilename<span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">&#39;js/[id].[chunkhash].&#39;</span> <span class="token operator">+</span> Version <span class="token operator">+</span> <span class="token string">&#39;.js&#39;</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-在入口文件index-html添加" tabindex="-1"><a class="header-anchor" href="#_3-在入口文件index-html添加" aria-hidden="true">#</a> 3. 在入口文件index.html添加</h3><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pragram<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>no-cache<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cache-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>no-cache, no-store, must-revalidate<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>expires<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-nginx-配置-让index-html不缓存" tabindex="-1"><a class="header-anchor" href="#_4-nginx-配置-让index-html不缓存" aria-hidden="true">#</a> 4. nginx 配置，让index.html不缓存</h3><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code><span class="token directive"><span class="token keyword">location</span> = /index.html</span> <span class="token punctuation">{</span>
  <span class="token directive"><span class="token keyword">add_header</span> Cache-Control <span class="token string">&quot;no-cache, no-store&quot;</span></span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-其他" tabindex="-1"><a class="header-anchor" href="#_5-其他" aria-hidden="true">#</a> 5. 其他</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 使用细节：</span>
<span class="token comment">// 1、导入方式：在 src 文件夹中使用可以 const version = require(&#39;@/utils/version&#39;) 这样引入使用，在根目录也就是 src 之外的文件夹则只能 const version = require(&#39;./src/utils/version&#39;) 这样引入使用</span>

<span class="token comment">// 引入请求库（如果想使用 axios 请求，打开注释即可，下面 get 方法中也需要打开注释，默认使用JS原生请求）</span>
<span class="token comment">// const axios = require(&#39;axios&#39;)</span>
<span class="token comment">// 引入文件管理模块（基于 node 环境，如果为原生前端开发，则注释掉 fs 相关的代码即可，直接手动创建一个文件使用 get 方法获取即可，注意统一存储内容格式看 create 方法注释）</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 本地版本号缓存 key</span>
<span class="token keyword">const</span> storageKey <span class="token operator">=</span> <span class="token string">&#39;currentVersion&#39;</span>

<span class="token comment">// 创建版本文件（由于 fs 基于 node，且只需要每次编译时创建更新一遍，所以推荐放置于 vue.config.js 文件顶部使用，然后使用 build 命令时会被成功执行创建好文件）</span>
<span class="token comment">// path: 文件路径以及文件名称（例如：verify.text, public/verify.json 都是存在 public 文件夹中）</span>
<span class="token comment">// version: 版本号（例如：版本号、时间戳 ...，统一存储内容为：{ version: xxx }）</span>
<span class="token comment">// result: 回调创建于写入结果</span>
<span class="token keyword">function</span> <span class="token function">create</span> <span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&#39;public/verify.json&#39;</span><span class="token punctuation">,</span> version <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 在指定目录中添加校验文件</span>
  fs<span class="token punctuation">.</span><span class="token function">writeFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token punctuation">{</span> version <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> isOK <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>err
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">{</span> isOK <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取版本号（下面 get 方法）升级版（返回：当前版本号、是否有新版本。样例：{ version: xxx，new: true }，并缓存好新的版本号，可选择直接刷新页面。vue 推荐放到路由守卫 router.afterEach(路由跳转后) 回调中，切换页面时随时检查版本是否更新，这个请求很快的，占用的时间几乎可以忽略，而且就是切换页面完成之后，就算失败或者网不好也不影响正常操作）</span>
<span class="token comment">// path: 看下面 get 方法中的注释</span>
<span class="token comment">// isReload: 如果有新版本使用，是否重新加载当前页面，强制浏览器重服务器获取当前页面资源，false 为后续自行手动刷新</span>
<span class="token keyword">function</span> <span class="token function">getPro</span> <span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&#39;verify.json&#39;</span><span class="token punctuation">,</span> isReload <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取版本号</span>
    <span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 服务器版本号</span>
      <span class="token keyword">const</span> version <span class="token operator">=</span> res<span class="token punctuation">.</span>version
      <span class="token comment">// 检查是否有新版本</span>
      <span class="token keyword">const</span> isNew <span class="token operator">=</span> <span class="token function">isNewAvailable</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span>
      <span class="token comment">// 缓存版本号</span>
      <span class="token function">save</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span>
      <span class="token comment">// 有新版本的话是否重新从服务器加载页面数据</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>isNew <span class="token operator">&amp;&amp;</span> isReload<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
      <span class="token comment">// 返回</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> version<span class="token operator">:</span> version<span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token operator">:</span> isNew <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 返回</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 获取版本号（返回：当前版本号。样例：{ version: xxx }，vue 推荐放到路由守卫 router.afterEach(路由跳转后) 回调中，切换页面时随时检查版本是否更新，这个请求很快的，占用的时间几乎可以忽略，而且就是切换页面完成之后，就算失败或者网不好也不影响正常操作）</span>
<span class="token comment">// path: 服务器文件路径（例如上 create() 中的路径，文件存 build 后存放在 public 文件夹中，服务器路径则直接域 + 文件名既可，如果为原生前端开发也是一样）</span>
<span class="token keyword">function</span> <span class="token function">get</span> <span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">&#39;verify.json&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 服务器文件路径</span>
  <span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>origin <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> path <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?timestamp=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  
  <span class="token comment">// axios 请求</span>
  <span class="token comment">// return new Promise((resolve, reject) =&gt; {</span>
  <span class="token comment">//   // 获取内容</span>
  <span class="token comment">//   axios.get(url).then(res =&gt; {</span>
  <span class="token comment">//     resolve(res)</span>
  <span class="token comment">//   }).catch(err =&gt; {</span>
  <span class="token comment">//     reject(err)</span>
  <span class="token comment">//   })</span>
  <span class="token comment">// })</span>

  <span class="token comment">// JS原生请求</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 XMLHttpRequest 对象</span>
    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// 现代主流浏览器的写法</span>
      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token comment">// IE浏览器的写法</span>
      xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">&#39;Microsoft.XMLHTTP&#39;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建网络请求对象</span>
    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
    <span class="token comment">// 发送请求</span>
    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// 请求回调</span>
    xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// 连接成功</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 请求成功</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">// 返回</span>
          <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 连接失败</span>
        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&#39;获取失败&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 缓存版本号</span>
<span class="token comment">// version: 版本号（服务器获取到的版本号）</span>
<span class="token keyword">function</span> <span class="token function">save</span> <span class="token punctuation">(</span>version<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span>storageKey<span class="token punctuation">,</span> version<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 检查是否有新版本（true：有新版本 false：没有新版本）</span>
<span class="token comment">// version: 版本号（服务器获取到的版本号）</span>
<span class="token keyword">function</span> <span class="token function">isNewAvailable</span> <span class="token punctuation">(</span>version<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 没值（不清楚是否为新版本，默认返回 false, 如果这种情况下需要刷新，可修改返回 true）</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>version<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
  <span class="token comment">// 获取本地缓存的版本号</span>
  <span class="token keyword">const</span> storageVersion <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>storageKey<span class="token punctuation">)</span>
  <span class="token comment">// 本地没有版本号，说明本机第一次加载，不算新版本</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>storageVersion <span class="token operator">||</span> storageVersion <span class="token operator">===</span> <span class="token string">&#39;undefined&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span> <span class="token punctuation">}</span>
  <span class="token comment">// 本地有版本号，进行对比</span>
  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>version<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token operator">!==</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>storageVersion<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">}</span>

<span class="token comment">// 刷新当前网页</span>
<span class="token keyword">function</span> <span class="token function">reload</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 重新加载当前页面，强制浏览器重服务器获取当前页面资源</span>
  window<span class="token punctuation">.</span>location<span class="token punctuation">.</span><span class="token function">reload</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// 导出</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token comment">// 创建版本文件</span>
  create<span class="token punctuation">,</span>
  <span class="token comment">// 获取版本号</span>
  get<span class="token punctuation">,</span>
  <span class="token comment">// 获取版本号升级版</span>
  getPro<span class="token punctuation">,</span>
  <span class="token comment">// 缓存版本号</span>
  save<span class="token punctuation">,</span>
  <span class="token comment">// 检查是否有新版本</span>
  isNewAvailable<span class="token punctuation">,</span>
  <span class="token comment">// 刷新当前页面，强制浏览器重服务器获取当前页面资源</span>
  reload
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何更新版本号" tabindex="-1"><a class="header-anchor" href="#如何更新版本号" aria-hidden="true">#</a> 如何更新版本号</h2><h3 id="_1-使用npm命令行更新" tabindex="-1"><a class="header-anchor" href="#_1-使用npm命令行更新" aria-hidden="true">#</a> 1. 使用npm命令行更新</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 版本号基本是由三位数字组成：</span>
   <span class="token number">1</span>    <span class="token punctuation">.</span>   <span class="token number">0</span>     <span class="token punctuation">.</span>   <span class="token number">0</span>
<span class="token punctuation">[</span>major<span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token punctuation">[</span>minor<span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token punctuation">[</span>patch<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>major 进行不兼容的API更改时的版本</li><li>minor 以向后兼容的方式添加功能时的版本</li><li>patch 向后兼容的错误修复程序的版本</li></ul><table><thead><tr><th>选项</th><th><strong>描述</strong></th><th><strong>例子</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>major</td><td>重大更新版本</td><td><code>npm version major</code></td><td>0.2.0 -&gt; 1.0.0</td></tr><tr><td>minor</td><td>主要更新版本</td><td><code>npm version minor</code></td><td>0.2.0 -&gt; 0.3.0</td></tr><tr><td>patch</td><td>补丁更新版本</td><td><code>npm version patch</code></td><td>0.2.0 -&gt; 0.2.1</td></tr><tr><td>premajor</td><td>重大更新预发布版本</td><td><code>npm version premajor</code></td><td>0.2.0 -&gt; 1.0.0-0</td></tr><tr><td>preminor</td><td>主要更新预发布版本</td><td><code>npm version preminor</code></td><td>0.2.0 -&gt; 0.3.0-0</td></tr><tr><td>prepatch</td><td>补丁更新预发布版本</td><td><code>npm version prepatch</code></td><td>0.2.0 -&gt; 0.2.1-0</td></tr><tr><td>prerelease</td><td>预发布版本</td><td><code>npm version prerelease</code></td><td>当前版本不是预发布版本的会出错</td></tr><tr><td>from-git</td><td>拿取git的tag作为版本号设置至package.json内</td><td><code>npm version from-git</code></td><td>git的tag标签没有设置的情况下，会抛出错误</td></tr></tbody></table><p>使用[--preid]提供额外参数还可用于详细描述预发布版本的作用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 更新为预发布版本号</span>
$ <span class="token function">npm</span> version premajor <span class="token parameter variable">--preid</span> beta
v1.0.0-beta.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景1：简单使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 更新至新的补丁版本</span>
$ <span class="token function">npm</span> version patch

<span class="token comment"># 打印git历史</span>
$ <span class="token function">git</span> log
commit 39c8ba50f0ef18aab41ac9c65669b2769ed3b3a7 <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master, tag: v0.2.1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景2：自定义git的提交内容</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">npm</span> version major <span class="token parameter variable">-m</span> <span class="token string">&quot;版本更新至%s&quot;</span>
v1.0.0

$ <span class="token function">git</span> log
commit 7b9e3102111f8f86fc70d1b1fcab96bb9389df9b <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master, tag: v1.0.0<span class="token punctuation">)</span>
    版本更新至1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景3：不进行git操作</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 更新至新的补丁版本，并不增加git的tag</span>
$ <span class="token function">npm</span> version patch --no-git-tag-version

$ <span class="token function">git</span> log
commit eda4316722a9d03f2fd5e60f61507a6e272ddc1b <span class="token punctuation">(</span>HEAD -<span class="token operator">&gt;</span> master<span class="token punctuation">)</span>

$ <span class="token function">git</span> status
On branch master
Your branch is ahead of <span class="token string">&#39;origin/master&#39;</span> by <span class="token number">6</span> commits.
  <span class="token punctuation">(</span>use <span class="token string">&quot;git push&quot;</span> to publish your <span class="token builtin class-name">local</span> commits<span class="token punctuation">)</span>

Changes not staged <span class="token keyword">for</span> commit:
  <span class="token punctuation">(</span>use <span class="token string">&quot;git add &lt;file&gt;...&quot;</span> to update what will be committed<span class="token punctuation">)</span>
  <span class="token punctuation">(</span>use <span class="token string">&quot;git restore &lt;file&gt;...&quot;</span> to discard changes <span class="token keyword">in</span> working directory<span class="token punctuation">)</span>
        modified:   package.json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="交互式选择版本号" tabindex="-1"><a class="header-anchor" href="#交互式选择版本号" aria-hidden="true">#</a> 交互式选择版本号</h2>`,29),d={href:"https://github.com/release-it/release-it",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/sindresorhus/np",target:"_blank",rel:"noopener noreferrer"},v=["src"];function m(e,b){const s=o("ExternalLinkIcon");return c(),i("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[a("release-it"),t(s)])]),n("li",null,[n("a",k,[a("np"),t(s)]),n("img",{src:e.$withBase("/images/np.png"),alt:"foo"},null,8,v)])])])}const h=p(u,[["render",m],["__file","webpack.html.vue"]]);export{h as default};
